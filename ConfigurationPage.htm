<html>

<head>
    <title>2B-LAW Configuration</title>
    <script src="../ClientGlobalContext.js.aspx"></script>
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" crossorigin="anonymous" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" crossorigin="anonymous" integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4"></script>
    <script src="bbs_/Scripts/bootstrap.min.js" type="text/javascript"></script>
    <script src="bbs_/Scripts/2BJavascript" type="text/javascript"></script>
    <link href="bbs_/Styles/styles.css" rel="stylesheet" type="text/css">
    <link href="bbs_/Styles/bootstrap.min.css" rel="stylesheet" type="text/css">
    <link href="bbs_/Styles/theme.min.css" rel="stylesheet" type="text/css">

    <script>

        window.onload = function () {
            debugger;
            populateVersion();
            // populateUsers();
            if (validLicense() == true) {
                $("#panel-legal").show();
                $("#panel-users").show();
                $("#panel-users").on('shown.bs.collapse', function () {
                    filterUser(0);
                    setLicenseLabel();
                });
                $("#panel-samples").show();
            }
        };

        function populateVersion() {
            debugger;
            var _txtV = document.getElementById("txtVer");
            if (_txtV == null) {
                return;
            }
            var reqString = "/SolutionSet?$select=Version&$filter=FriendlyName eq 'FullLegalSolution'";
            var _val = getRecord(reqString, true);
            if (_val != null) {
                _txtV.value = _val.Version;
            }
        }

        function submitLicense() {
            debugger;
            //get license
            var _sl = getLicense();
            //validate license
            if (_sl === null) {
                validLicense();
            }
            alert("Successfully created a license record.");
        }

        //Submit License
        function getLicense() {
            debugger;
            var _token = document.getElementById("token").value;
            if (_token == null || _token == "") {
                alert("A valid token must be entered.");
                return;
            }
            var orgString = "/SolutionSet?$select=OrganizationId&$filter=FriendlyName eq 'FullLegalSolution'";
            var _org = getRecord(orgString, true);
            if (_org == null) {
                alert("No Organization Found.");
                return;
            }
            // var newOrganizationID = "cfa842e5-b1cd-448a-bf39-d7f081eef226";
            var newOrganizationID = _org.OrganizationId.Id;
            // var newCompanyName = "orgd5c974c7";
            var newCompanyName = window.parent.Xrm.Page.context.getOrgUniqueName();
            var newName = newCompanyName + " - " + newOrganizationID;
            var _qryString = "/bbs_licenseSet?$select=bbs_name&$filter=bbs_name eq '" + newName +
                "' and statecode/Value eq 0";
            var _lic = getRecord(_qryString, true);
            if (_lic == null) {
                var bbs_newRecord = {};
                var val;
                if (_token == null) {
                    return alert("Invalid token.");
                }
                bbs_newRecord.bbs_name = newName;
                bbs_newRecord.bbs_CompanyName = newCompanyName;
                bbs_newRecord.bbs_OrganizationID = newOrganizationID;
                bbs_newRecord.bbs_Trial = true;
                bbs_newRecord.bbs_TrialToken = _token;
                jsonEntity = window.JSON.stringify(bbs_newRecord);
                var reqString = "/bbs_licenseSet";
                var _newLicense = createRecord(reqString, jsonEntity, true);

                if (_newLicense != null) {
                    val = _newLicense.bbs_licenseId;
                }

                CallWorkflow("Register Solution", val);
                if (validLicense() == true) {
                    $("#panel-legal").show();
                }
            }
        }

        function validLicense() {
            debugger;
            var orgString = "/SolutionSet?$select=OrganizationId&$filter=FriendlyName eq 'FullLegalSolution'";
            var _org = getRecord(orgString, true);
            if (_org == null) {
                alert("No Organization Found.");
                return;
            }
            // var newOrganizationID = "cfa842e5-b1cd-448a-bf39-d7f081eef226";
            var newOrganizationID = _org.OrganizationId.Id;
            // var newCompanyName = "orgd5c974c7";
            var newCompanyName = window.parent.Xrm.Page.context.getOrgUniqueName();
            var newName = newCompanyName + " - " + newOrganizationID;
            var _qryString = "/bbs_licenseSet?$select=bbs_name&$filter=bbs_name eq '" + newName +
                "' and statecode/Value eq 0";
            var _lic = getRecord(_qryString, true);
            if (_lic != null) {
                return true;
            } else {
                return false;
            }
        }

        function getDefaultPriceList() {
            debugger;
            var priceListName = "2B-LAW";
            var _qryString = "/PriceLevelSet?$select=PriceLevelId&$filter=Name eq '" + priceListName + "'";
            var _pl = getRecord(_qryString, true);
            if (_pl == null) {

                var code = "USD";
                var currencyString =
                    "/TransactionCurrencySet?$select=TransactionCurrencyId&$filter=ISOCurrencyCode eq '" + code + "'";
                var ret = getRecord(currencyString, true);

                if (ret != null) {
                    var bbs_newRecord = {};
                    bbs_newRecord.Name = "2B-LAW";

                    bbs_newRecord.TransactionCurrencyId = {
                        Id: ret.TransactionCurrencyId,
                        LogicalName: "transactioncurrency"
                    };
                    jsonEntity = window.JSON.stringify(bbs_newRecord);
                    var reqString = "/PriceLevelSet";
                    _pl = createRecord(reqString, jsonEntity, true);

                }
            }
            return _pl;
        }

        function getUOM() {
            debugger;
            var unitOfMeasure = "Primary Unit";
            var _qryString = "/UoMSet?$select=UoMId&$filter=Name eq '" + unitOfMeasure + "'";
            var ret = getRecord(_qryString, true);

            if (ret == null) {
                alert("Could not find default Primary Unit.");

            }
            return ret;
        }

        function getUOMSchedule() {
            // debugger;
            var unitOfMeasureSchedule = "Default Unit";
            var _qryString = "/UoMScheduleSet?$select=UoMScheduleId&$filter=Name eq '" + unitOfMeasureSchedule + "'";
            var ret = getRecord(_qryString, true);

            if (ret == null) {
                alert("Could not find default Unit Group.");
            }
            return ret;
        }

        function getExpenseProduct(UoMScheduleId, UoMId, PriceLevelId) {
            debugger;
            var expenseProduct = "Expense";
            var _qryString = "/ProductSet?$select=ProductId&$filter=Name eq '" + expenseProduct + "'";
            var _exp = getRecord(_qryString, true);
            if (_exp == null) {
                var bbs_newRecord = {};
                bbs_newRecord.Name = expenseProduct;
                bbs_newRecord.ProductNumber = "2000";
                bbs_newRecord.DefaultUoMScheduleId = {
                    Id: UoMScheduleId.UoMScheduleId,
                    LogicalName: "uomschedule"
                };
                bbs_newRecord.DefaultUoMId = {
                    Id: UoMId.UoMId,
                    LogicalName: "uom"
                };
                bbs_newRecord.PriceLevelId = {
                    Id: PriceLevelId.PriceLevelId,
                    LogicalName: "pricelevel"
                };
        
                bbs_newRecord.QuantityDecimal = 2;

                jsonEntity = window.JSON.stringify(bbs_newRecord);

                var reqString = "/ProductSet";

                _exp = createRecord(reqString, jsonEntity, true);

            }
            return _exp;
        }

        function getServiceProduct(UoMScheduleId, UoMId, PriceLevelId) {
            // debugger;
            var serviceProduct = "Legal Service";
            var _qryString = "/ProductSet?$select=ProductId&$filter=Name eq '" + serviceProduct +
                "'";
            var _ser = getRecord(_qryString, true);
            if (_ser == null) {
                var bbs_newRecord = {};
                bbs_newRecord.Name = serviceProduct;
                bbs_newRecord.ProductNumber = "1000";
                bbs_newRecord.DefaultUoMScheduleId = {
                    Id: UoMScheduleId.UoMScheduleId,
                    LogicalName: "uomschedule"
                };
                bbs_newRecord.DefaultUoMId = {
                    Id: UoMId.UoMId,
                    LogicalName: "uom"
                };
                bbs_newRecord.PriceLevelId = {
                    Id: PriceLevelId.PriceLevelId,
                    LogicalName: "pricelevel"
                };
            
                bbs_newRecord.QuantityDecimal = 2;

                jsonEntity = window.JSON.stringify(bbs_newRecord);

                var reqString = "/ProductSet";
                var _ser = createRecord(reqString, jsonEntity, true);

            }
            return _ser;
        }

        function getLegalConfiguration(UoMId, PriceLevelId, ExpenseProductId, ServiceProductId) {
            // debugger;
            var legalConfig = "Primary";
            var _qryString = "/bbs_legalconfigurationSet?$select=bbs_legalconfigurationId&$filter=bbs_name eq '" +
                legalConfig + "'";
            var _lc = getRecord(_qryString, true);
            if (_lc == null) {
                var billingOption = document.getElementById("billingSelect").value;
                var bbs_newRecord = {};
                bbs_newRecord.bbs_name = legalConfig;
                bbs_newRecord.bbs_UnitofMeasureId = {
                    Id: UoMId.UoMId,
                    LogicalName: "uom"
                };
                bbs_newRecord.bbs_PriceListId = {
                    Id: PriceLevelId.PriceLevelId,
                    LogicalName: "pricelevel"
                };
                bbs_newRecord.bbs_ExpenseProduct = {
                    Id: ExpenseProductId.ProductId,
                    LogicalName: "product"
                };
                bbs_newRecord.bbs_ServiceProduct = {
                    Id: ServiceProductId.ProductId,
                    LogicalName: "product"
                };

                bbs_newRecord.bbs_BillingUnitMin = {
                    Value: Number(billingOption)
                };
                jsonEntity = window.JSON.stringify(bbs_newRecord);
                var reqString = "/bbs_legalconfigurationSet";
                _lc = createRecord(reqString, jsonEntity, true);

            }
            return _lc;
        }
        //status box of licensed (active) users / total number of users
        function setLicenseLabel() {
            debugger;
            var _txtL = document.getElementById("txtLicense");
            var _label;
            if (_txtL == null) {
                return;
            }
            var reqString =
                "/SystemUserSet?$select=SystemUserId&$orderby=SystemUserId&$filter=IsDisabled eq false and bbs_Is2BLAWUser eq true";
            var _val = getRecords(reqString, true);
            sessionStorage.setItem("currentLicenseCount", _val.length);
            reqString =
                "/bbs_licenseSet?$select=bbs_NumberofUsers&$filter=statecode/Value eq 0";
            var _numberOfUsers = getRecord(reqString, true);
            var _numbLicensed = _numberOfUsers.bbs_NumberofUsers;
            if (_val == null) {
                _label = "0/" + _numbLicensed;
            } else {
                _label = _val.length + "/" + _numbLicensed;
            }
            _txtL.value = _label;
        }
        //onchange function for the dropdown select
        function filterUser() {
            debugger;
            var selectedUser = document.getElementById("userSelect").value;
            $("#uBody").empty();
            if (selectedUser == "0") {
                getUsers(0);
                return;
            } else if (selectedUser == "1") {
                getUsers(1);
                return;
            } else {
                getUsers(2);
                return;
            }
        }

        function getUsers(userTypes) {
            debugger;
            var licensedUsers = "2B-LAW Licensed Users" + "2B-LAW Attorney";
            var _qryString;
            var _allUsers;
            var _activeUsers;
            var _inactiveUers;

            switch (userTypes) {
                case 0:
                    //all active users
                    _qryString =
                        "/SystemUserSet?$select=SystemUserId,BusinessUnitId,FullName,bbs_Is2BLAWUser&$orderby=FullName&$filter=IsDisabled eq false and bbs_Is2BLAWUser eq true";

                    break;
                case 1:
                    //all inactive users
                    _qryString =
                        "/SystemUserSet?$select=SystemUserId,BusinessUnitId,FullName,bbs_Is2BLAWUser&$orderby=FullName&$filter=IsDisabled eq false and bbs_Is2BLAWUser ne true";

                    break;
                case 2:
                    //all users
                    _qryString =
                        "/SystemUserSet?$select=SystemUserId,BusinessUnitId,FullName,bbs_Is2BLAWUser&$orderby=FullName&$filter=IsDisabled eq false";

                    break;
            }

            var _users = getRecords(_qryString, true);
            if (_users == null) {
                // alert("No users found.");
                return
            }
            for (var i = 0; i < _users.length; i++) {
                var _u = _users[i];
                debugger;
                var _id = _u.SystemUserId;
                // alert("User Id " + _id);
                var _bid = _u.BusinessUnitId.Id;
                var _bn = _u.BusinessUnitId.Name;
                var _fn = _u.FullName;
                var _isUser = _u.bbs_Is2BLAWUser;
                var _row;
                if (_isUser == true) {
                    _row = "<tr id='" + _id + "'>" +
                        "<td><input type='checkbox'checked data-dirty='false' data-origval='true' data-user-id='" +
                        _id + "' data-buid='" + _bid + "' onclick='allAvailableLicenses(this)'></td>" +
                        "<td>" + _fn + "</td>" +
                        "<td>" + _bn + "</td>";

                } else {
                    _row = "<tr id='" + _id + "'>" +
                        "<td><input type='checkbox' data-dirty='false' data-origval='false'  data-user-id='" +
                        _id + "' data-buid='" + _bid + "' onclick='allAvailableLicenses(this)'></td>" +
                        "<td>" + _fn + "</td>" +
                        "<td>" + _bn + "</td>";
                }


                _row = _row + "</tr>";
                $("#userTable > tbody").append(_row);

                // return;
            }
        }


        //all available licenses
        //used to disable checkboxes when no users are remaining 
        //dirty flag + conditional check for available licenses
        function allAvailableLicenses(cel) {
            debugger;
            var 
            var _licCount = sessionStorage.getItem("currentLicenseCount");
            var _numbLicensed;
                if (cel.checked == false) {
                    cel.dataset.dirty = 'false';
                    if (_licCount != 0) {
                    _licCount = _licCount - 1;
                    return;
                    }
                } else {
                    _licCount = _licCount + 1;
                }
            // var reqString =
            //     "/SystemUserSet?$select=SystemUserId&$orderby=SystemUserId&$filter=IsDisabled eq false and bbs_Is2BLAWUser eq true";
            // var _val = getRecords(reqString, true);
            var reqString =
                "/bbs_licenseSet?$select=bbs_NumberofUsers&$filter=statecode/Value eq 0";
            var _numberOfUsers = getRecord(reqString, true);
            var _numbLicensed = _numberOfUsers.bbs_NumberofUsers;
            if (_licCount < 5) {
                cel.dataset.dirty = 'true';
                return;
            } else {
                cel.checked = false;
                alert("No users can be assigned at this time.");
                return;
            }
        }
    //needs to loop through the table to test if flag is dirty, if the flag is dirty we need to updateRecord(), then value of the checkbox needs to be passed, then a userid will be used with calling the workflow

        function updateLicense() {
            debugger;
            var _qryString = "/";
            var _tbl = document.getElementById("userTable");
            for (var i = 1, row; row = _tbl.rows[i]; i++) {
                for (var j = 4, col; col = row.cells[j]; j++) {
                    var _cel = col.childNodes[0];
                        if (_cel.dataset.dirty == 'true') {
                            //update opportunity product
                            updateRecord(col, i);
                        } else {
                            (_cel.dataset.dirty == 'true')
                            updateRecord(_qryString, true);
                        }
                    }
                }
        }

        function installSampleData() {

        }

        function extendProgressBar() {
            debugger;
            var elem = document.getElementById("myBar");
            var width = 0;
            var id = setInterval(frame, 10);

            function frame() {
                debugger;
                var _pl;
                var pList;
                var _uom;
                var _UOM;
                var _uomSchedule;
                var getUOMS;
                var _ep;
                var expenseP;
                var _sp;
                var serviceP;
                var _lc;

                if (width >= 100) {
                    clearInterval(id);
                } else {

                    switch (width) {
                        case 0:
                            _pl = getDefaultPriceList();
                            sessionStorage.setItem("priceList", JSON.stringify(_pl));
                            break;
                        case 20:
                            _uom = getUOM();
                            _uomSchedule = getUOMSchedule();
                            sessionStorage.setItem("UOM", JSON.stringify(_uom));
                            sessionStorage.setItem("uomSchedule", JSON.stringify(_uomSchedule));
                            break;
                        case 40:
                            debugger;
                            pList = sessionStorage.getItem("priceList");
                            if (pList == null) {
                                alert("Price List not found. Cannot continue configuration.");
                                return
                            }
                            _pl = JSON.parse(pList);
                            _UOM = sessionStorage.getItem("UOM");
                            if (_UOM == null) {
                                alert("Unit of Measure not found. Cannot continue configuration.");
                                return
                            }
                            _uom = JSON.parse(_UOM);
                            getUOMS = sessionStorage.getItem("uomSchedule");
                            if (getUOMS == null) {
                                alert("Unit of Measure Schedule not found. Cannot continue configuration.");
                                return
                            }
                            _uomSchedule = JSON.parse(getUOMS);
                            _ep = getExpenseProduct(_uomSchedule, _uom, _pl);

                            sessionStorage.setItem("expenseProduct", JSON.stringify(_ep));
                            break;
                        case 60:
                            pList = sessionStorage.getItem("priceList");
                            if (pList == null) {
                                alert("Price List not found. Cannot continue configuration.");
                                return
                            }
                            _pl = JSON.parse(pList);
                            _UOM = sessionStorage.getItem("UOM");
                            if (_UOM == null) {
                                alert("Unit of Measure not found. Cannot continue configuration.");
                                return
                            }
                            _uom = JSON.parse(_UOM);
                            getUOMS = sessionStorage.getItem("uomSchedule");
                            if (getUOMS == null) {
                                alert("Unit of Measure Schedule not found. Cannot continue configuration.");
                                return
                            }
                            _uomSchedule = JSON.parse(getUOMS);
                            _sp = getServiceProduct(_uomSchedule, _uom, _pl);
                            sessionStorage.setItem("serviceProduct", JSON.stringify(_sp));
                            break;
                        case 80:
                            _UOM = sessionStorage.getItem("UOM");
                            if (_UOM == null) {
                                alert("Unit of Measure not found. Cannot continue configuration.");
                                return
                            }
                            _uom = JSON.parse(_UOM);
                            pList = sessionStorage.getItem("priceList");
                            if (pList == null) {
                                alert("Price List not found. Cannot continue configuration.");
                                return
                            }
                            _pl = JSON.parse(pList);
                            expenseP = sessionStorage.getItem("expenseProduct");
                            if (expenseP == null) {
                                alert("Expense Product not found. Cannot continue configuration.");
                                return
                            }
                            _ep = JSON.parse(expenseP);
                            serviceP = sessionStorage.getItem("serviceProduct");
                            if (serviceP == null) {
                                alert("Service Product not found. Cannot continue configuration.");
                                return
                            }
                            _sp = JSON.parse(serviceP);
                            _lc = getLegalConfiguration(_uom, _pl, _ep, _sp);
                            alert("Successfully created a legal record.");
                            break;
                    }
                    width = width + 20;
                    elem.style.width = width + '%';
                    elem.innerHTML = width + '%';
                }
            }
        }
    </script>

    <style>
        .logo {
            width: 302px;
            height: 91px;
            margin: auto;
            position: relative;
        }

        @font-face {
            font-family: 'glyphicons_halflings_regular';
            src: url('../Fonts/glyphicons_halflings_regular.ttf.css');
        }

        @font-face {
            font-family: 'glyphicons_halflings_regular_ie';
            src: url('../Fonts/glyphicons_halflings_regular.eot.css');
        }

        .clpglyph {
            font-family: glyphicons_halflings_regular, Fallback, glyphicons_halflings_regular_ie;
            font-size: 14px;
        }

        .btn-txtVer {
            color: white;
            background-color: gray;
        }

        .btn-txtLicense {
            color: white;
            background-color: gray;
        }

    </style>

    <meta>
    <style type="text/css">
        P {
            margin: 0;
        }
    </style>
</head>

<body onfocusout="parent.setEmailRange();" style="word-wrap: break-word;">
    <div class="container" style="font-family: undefined;">
        <p></p>
        <div class="row">
            <div>
                <img class="logo" alt="2B Logo" src="bbs_/images/bblogo.png">
                <input class="btn-txtVer" id="txtVer" type="button" disabled="disable"> Version Number
            </div>

        </div>

    </div>

    <div class="panelCollapse" style="font-family: undefined;">
        <div class="panel panel-primary">
            <div class="panel-heading" data-toggle="collapse" href="#grpLicense">
                <h3 class="panel-title">
                    License Registration
                    <span class="if-collapsed">
                        <i class="glyphicon glyphicon-chevron-down clpglyph"></i>
                    </span>
                    <span class="if-not-collapsed">
                        <i class="glyphicon glyphicon-chevron-up clpglyph"></i>
                    </span>
                </h3>
            </div>
            <div id="grpLicense" class="panel-collapse collapse in">
                <div class="panel-body">
                    <p>Please enter in your unique token.</p>
                    <p></p>
                    <br>
                    <p>
                        <div class="form-group">
                            <label for="inputdefault"></label>
                            <input id="token" type="text" value="GEJUPA6IcXY+zJgmmPOk/ECL1AptfKFH5Gey2/QuX0k=" required="true">
                            <button class="btn btn-primary" id="btnSubmitLicense" type="submit" onclick="submitLicense()">Submit</button>
                        </div>
                    </p>
                </div>
            </div>
        </div>
    </div>

    <div class="panelCollapse" id="panel-legal" style="font-family: undefined; display: none;">
        <div class="panel panel-primary">
            <div class="panel-heading" data-toggle="collapse" id="no-collapsable" href="#grpLegal">
                <h3 class="panel-title">
                    Legal Configuration Record
                    <span class="if-collapsed">
                        <i class="glyphicon glyphicon-chevron-down clpglyph"></i>
                    </span>
                    <span class="if-not-collapsed">
                        <i class="glyphicon glyphicon-chevron-up clpglyph"></i>
                    </span>
                </h3>
            </div>
            <div id="grpLegal" class="panel-collapse collapse ">
                <div class="panel-body">
                    <p>
                        Please complete and submit the following required information to configure a record. Billing Units
                        <a href="#" class="badge badge-info" data-toggle="modal" data-target="#billingUnitsModal">?</a>

                    </p>
                    <!-- Modal -->
                    <div class="modal fade" id="billingUnitsModal" tabindex="-1" role="dialog" aria-labelledby="billingUnitsModalLabel" aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="billingUnitsModalLabel">About Billing Units</h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">X</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    Billing units are the interval minutes used to bill company clients. If no selection is made, the default billing unit is
                                    15 minuntes.
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="billingSelect"></label>
                        <select class="form-control" id="billingSelect">
                            <option value="100000002">Select Units in Minutes</option>
                            <option value="100000000">6</option>
                            <option value="100000001">10</option>
                            <option value="100000002">15</option>
                        </select>
                    </div>

                    <p>
                        <button class="btn btn-primary" id="btnConfigure2bLaw" type="submit" onclick="extendProgressBar()">Configure</button>
                    </p>
                    <br>
                    <div id="progressBar" class="progress">
                        <div id="myBar" class="progress-bar progress-bar-success progress-bar-striped" role="progressbar" aria-valuenow="0" aria-valuemin="0"
                            aria-valuemax="100" style="width:0%">
                            0% Complete
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="panelCollapse" id="panel-users" style="font-family: undefined; display: none;">
        <div class="panel panel-primary">
            <div class="panel-heading" data-toggle="collapse" id="no-collapsable" href="#grpUsers">
                <h3 class="panel-title">
                    Users
                    <span class="if-collapsed">
                        <i class="glyphicon glyphicon-chevron-down clpglyph"></i>
                    </span>
                    <span class="if-not-collapsed">
                        <i class="glyphicon glyphicon-chevron-up clpglyph"></i>
                    </span>
                </h3>
            </div>
            <div id="grpUsers" class="panel-collapse collapse">
                <div class="panel-body">
                    <div class="container">
                        <div class="row">
                            <div class="col-sm-6">
                                <p>
                                    <br> Assign or unassign licensed users.
                                    <br>
                                </p>
                            </div>
                            <div class="col-sm-6">
                                <p>
                                    <br>
                                    <input class="btn-txtLicense" id="txtLicense" type="button" disabled="disable"> Licensed Users
                                    <br>
                                </p>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="userSelect"></label>
                        <select onchange="filterUser()" class="form-control" id="userSelect">
                            <option value="0">Active Users</option>
                            <option value="1">Inactive Users</option>
                            <option value="2">All Users</option>
                        </select>
                    </div>
                    <div style="max-height:300px; overflow:scroll">
                        <table class="table table-striped table-dark" id="userTable">
                            <thead>
                                <tr>
                                    <th class="col-xs-2">Status
                                        <a href="#" class="badge badge-pill badge-info" data-toggle="modal" data-target="#userInfoModal">?</a>
                                    </th>
                                    <th class="col-xs-8">Full Name</th>
                                    <th class="col-xs-2">Business Unit</th>

                                </tr>
                            </thead>
                            <tbody id="uBody">

                            </tbody>
                        </table>
                    </div>
                    <!-- Modal -->
                    <div class="modal fade" id="userInfoModal" tabindex="-1" role="dialog" aria-labelledby="userInfoModalLabel" aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="userInfoModalLabel">About Status Box</h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">X</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    A checked or unchecked box indiciates if that user's license is active or inactive, respectively.
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <button type="button" class="btn btn-primary" onclick="updateLicense()">Submit</button>
                    </p>
                </div>
            </div>
        </div>
    </div>

    <div class="panelCollapse" id="panel-samples" style="font-family: undefined; display: none;">
        <div class="panel panel-primary">
            <div class="panel-heading" data-toggle="collapse" id="no-collapsable" href="#grpSampleData">
                <h3 class="panel-title">
                    Data Samples
                    <span class="if-collapsed">
                        <i class="glyphicon glyphicon-chevron-down clpglyph"></i>
                    </span>
                    <span class="if-not-collapsed">
                        <i class="glyphicon glyphicon-chevron-up clpglyph"></i>
                    </span>
                </h3>
            </div>
            <div id="grpSampleData" class="panel-collapse collapse ">
                <div class="panel-body">
                    <p>
                        Select sample data to install.
                    </p>
                    <div class="form-group">
                        <label for="practice"></label>
                        <div class="form-group">
                            <label for="practiceSelect"></label>
                            <select class="form-control" id="practiceSelect">
                                <option>Criminal Law </option>
                                <option>Divorce Law </option>
                                <option>Corporate Law </option>
                                <option>Traffic Law </option>
                            </select>
                        </div>
                    </div>
                    <br>
                    <button class="btn btn-primary btn-sm" id="onclickSampleInstall()" type="button">
                        Install
                    </button>
                    <p></p>
                    <br>
                </div>
            </div>
        </div>
    </div>


</body>

</html>